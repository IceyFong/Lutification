// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _StreamingDataWidthCo_HH_
#define _StreamingDataWidthCo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct StreamingDataWidthCo : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<8> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;
    sc_in< sc_lv<32> > numReps_dout;
    sc_in< sc_logic > numReps_empty_n;
    sc_out< sc_logic > numReps_read;
    sc_out< sc_lv<32> > numReps_out_din;
    sc_in< sc_logic > numReps_out_full_n;
    sc_out< sc_logic > numReps_out_write;


    // Module declarations
    StreamingDataWidthCo(sc_module_name name);
    SC_HAS_PROCESS(StreamingDataWidthCo);

    ~StreamingDataWidthCo();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > exitcond_i_reg_191;
    sc_signal< sc_lv<1> > tmp_1_i_reg_200;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_logic > numReps_blk_n;
    sc_signal< sc_logic > numReps_out_blk_n;
    sc_signal< sc_lv<24> > p_1_i_reg_79;
    sc_signal< sc_lv<32> > o_i_reg_91;
    sc_signal< sc_lv<32> > t_i_reg_102;
    sc_signal< sc_lv<32> > tmp_fu_123_p2;
    sc_signal< sc_lv<32> > tmp_reg_186;
    sc_signal< bool > ap_condition_84;
    sc_signal< sc_lv<1> > exitcond_i_fu_129_p2;
    sc_signal< bool > ap_condition_95;
    sc_signal< sc_lv<32> > t_fu_134_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_1_i_fu_140_p2;
    sc_signal< sc_lv<32> > p_i_fu_158_p3;
    sc_signal< sc_lv<32> > ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113;
    sc_signal< sc_lv<32> > p_Val2_s_phi_fu_116_p4;
    sc_signal< sc_lv<32> > p_1_cast_i_fu_166_p1;
    sc_signal< sc_lv<32> > o_fu_146_p2;
    sc_signal< sc_lv<1> > tmp_5_i_fu_152_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_condition_61;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_condition_61();
    void thread_ap_condition_84();
    void thread_ap_condition_95();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113();
    void thread_ap_ready();
    void thread_exitcond_i_fu_129_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_numReps_blk_n();
    void thread_numReps_out_blk_n();
    void thread_numReps_out_din();
    void thread_numReps_out_write();
    void thread_numReps_read();
    void thread_o_fu_146_p2();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_p_1_cast_i_fu_166_p1();
    void thread_p_Val2_s_phi_fu_116_p4();
    void thread_p_i_fu_158_p3();
    void thread_t_fu_134_p2();
    void thread_tmp_1_i_fu_140_p2();
    void thread_tmp_5_i_fu_152_p2();
    void thread_tmp_fu_123_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
