-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataWidthCo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    numReps_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    numReps_empty_n : IN STD_LOGIC;
    numReps_read : OUT STD_LOGIC;
    numReps_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    numReps_out_full_n : IN STD_LOGIC;
    numReps_out_write : OUT STD_LOGIC );
end;


architecture behav of StreamingDataWidthCo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_i_reg_191 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal numReps_blk_n : STD_LOGIC;
    signal numReps_out_blk_n : STD_LOGIC;
    signal p_1_i_reg_79 : STD_LOGIC_VECTOR (23 downto 0);
    signal o_i_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_i_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_84 : BOOLEAN;
    signal exitcond_i_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_95 : BOOLEAN;
    signal t_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_1_i_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_fu_158_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_phi_fu_116_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_cast_i_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_61 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and not((ap_const_lv1_0 = exitcond_i_fu_129_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_lv1_0 = exitcond_i_fu_129_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and not((ap_const_lv1_0 = exitcond_i_fu_129_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    o_i_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_fu_129_p2))) then 
                o_i_reg_91 <= p_i_fu_158_p3;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
                o_i_reg_91 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_1_i_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))))) then 
                p_1_i_reg_79 <= p_Val2_s_phi_fu_116_p4(31 downto 8);
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
                p_1_i_reg_79 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    t_i_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_fu_129_p2))) then 
                t_i_reg_102 <= t_fu_134_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
                t_i_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))))) then
                exitcond_i_reg_191 <= exitcond_i_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_lv1_0 = exitcond_i_fu_129_p2))) then
                tmp_1_i_reg_200 <= tmp_1_i_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then
                    tmp_reg_186(31 downto 7) <= tmp_fu_123_p2(31 downto 7);
            end if;
        end if;
    end process;
    tmp_reg_186(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_condition_84, exitcond_i_fu_129_p2, ap_condition_95, ap_enable_reg_pp0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_84 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_i_fu_129_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_i_fu_129_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2 downto 2);

    ap_condition_61_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_191)
    begin
                ap_condition_61 <= ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0));
    end process;


    ap_condition_84_assign_proc : process(ap_start, ap_done_reg, numReps_empty_n, numReps_out_full_n)
    begin
                ap_condition_84 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (numReps_empty_n = ap_const_logic_0) or (numReps_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_95_assign_proc : process(in_V_V_empty_n, out_V_V_full_n, exitcond_i_reg_191, tmp_1_i_reg_200)
    begin
                ap_condition_95 <= (((exitcond_i_reg_191 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_1_i_reg_200)) and (in_V_V_empty_n = ap_const_logic_0)) or ((exitcond_i_reg_191 = ap_const_lv1_0) and (out_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_129_p2 <= "1" when (t_i_reg_102 = tmp_reg_186) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_191, tmp_1_i_reg_200)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_1_i_reg_200)))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_191, tmp_1_i_reg_200, ap_condition_95)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_1_i_reg_200)) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    numReps_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numReps_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            numReps_blk_n <= numReps_empty_n;
        else 
            numReps_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    numReps_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, numReps_out_full_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            numReps_out_blk_n <= numReps_out_full_n;
        else 
            numReps_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    numReps_out_din <= numReps_dout;

    numReps_out_write_assign_proc : process(ap_CS_fsm_state1, ap_condition_84)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
            numReps_out_write <= ap_const_logic_1;
        else 
            numReps_out_write <= ap_const_logic_0;
        end if; 
    end process;


    numReps_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_84)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
            numReps_read <= ap_const_logic_1;
        else 
            numReps_read <= ap_const_logic_0;
        end if; 
    end process;

    o_fu_146_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(o_i_reg_91));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_191)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= p_Val2_s_phi_fu_116_p4(8 - 1 downto 0);

    out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_191, ap_condition_95)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_191 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_condition_95 = ap_const_boolean_1))))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_1_cast_i_fu_166_p1 <= std_logic_vector(resize(unsigned(p_1_i_reg_79),32));

    p_Val2_s_phi_fu_116_p4_assign_proc : process(in_V_V_dout, tmp_1_i_reg_200, ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113, p_1_cast_i_fu_166_p1, ap_condition_61)
    begin
        if ((ap_condition_61 = ap_const_boolean_1)) then
            if ((ap_const_lv1_0 = tmp_1_i_reg_200)) then 
                p_Val2_s_phi_fu_116_p4 <= p_1_cast_i_fu_166_p1;
            elsif (not((ap_const_lv1_0 = tmp_1_i_reg_200))) then 
                p_Val2_s_phi_fu_116_p4 <= in_V_V_dout;
            else 
                p_Val2_s_phi_fu_116_p4 <= ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113;
            end if;
        else 
            p_Val2_s_phi_fu_116_p4 <= ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113;
        end if; 
    end process;

    p_i_fu_158_p3 <= 
        ap_const_lv32_0 when (tmp_5_i_fu_152_p2(0) = '1') else 
        o_fu_146_p2;
    t_fu_134_p2 <= std_logic_vector(unsigned(t_i_reg_102) + unsigned(ap_const_lv32_1));
    tmp_1_i_fu_140_p2 <= "1" when (o_i_reg_91 = ap_const_lv32_0) else "0";
    tmp_5_i_fu_152_p2 <= "1" when (o_fu_146_p2 = ap_const_lv32_4) else "0";
    tmp_fu_123_p2 <= std_logic_vector(shift_left(unsigned(numReps_dout),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
end behav;
