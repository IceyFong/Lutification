// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingDataWidthCo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic StreamingDataWidthCo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic StreamingDataWidthCo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> StreamingDataWidthCo::ap_ST_fsm_state1 = "1";
const sc_lv<3> StreamingDataWidthCo::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> StreamingDataWidthCo::ap_ST_fsm_state4 = "100";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> StreamingDataWidthCo::ap_const_lv1_1 = "1";
const bool StreamingDataWidthCo::ap_const_boolean_1 = true;
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_1 = "1";
const sc_lv<1> StreamingDataWidthCo::ap_const_lv1_0 = "0";
const sc_lv<24> StreamingDataWidthCo::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_7 = "111";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_4 = "100";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_8 = "1000";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_1F = "11111";
const sc_lv<32> StreamingDataWidthCo::ap_const_lv32_2 = "10";

StreamingDataWidthCo::StreamingDataWidthCo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_61);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );

    SC_METHOD(thread_ap_condition_84);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( numReps_empty_n );
    sensitive << ( numReps_out_full_n );

    SC_METHOD(thread_ap_condition_95);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( out_V_V_full_n );
    sensitive << ( exitcond_i_reg_191 );
    sensitive << ( tmp_1_i_reg_200 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_exitcond_i_fu_129_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( t_i_reg_102 );
    sensitive << ( tmp_reg_186 );
    sensitive << ( ap_condition_95 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );
    sensitive << ( tmp_1_i_reg_200 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );
    sensitive << ( tmp_1_i_reg_200 );
    sensitive << ( ap_condition_95 );

    SC_METHOD(thread_numReps_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( numReps_empty_n );

    SC_METHOD(thread_numReps_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( numReps_out_full_n );

    SC_METHOD(thread_numReps_out_din);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( numReps_dout );
    sensitive << ( ap_condition_84 );

    SC_METHOD(thread_numReps_out_write);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_condition_84 );

    SC_METHOD(thread_numReps_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_condition_84 );

    SC_METHOD(thread_o_fu_146_p2);
    sensitive << ( o_i_reg_91 );

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );
    sensitive << ( ap_condition_95 );
    sensitive << ( p_Val2_s_phi_fu_116_p4 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_191 );
    sensitive << ( ap_condition_95 );

    SC_METHOD(thread_p_1_cast_i_fu_166_p1);
    sensitive << ( p_1_i_reg_79 );

    SC_METHOD(thread_p_Val2_s_phi_fu_116_p4);
    sensitive << ( in_V_V_dout );
    sensitive << ( tmp_1_i_reg_200 );
    sensitive << ( ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113 );
    sensitive << ( p_1_cast_i_fu_166_p1 );
    sensitive << ( ap_condition_61 );

    SC_METHOD(thread_p_i_fu_158_p3);
    sensitive << ( o_fu_146_p2 );
    sensitive << ( tmp_5_i_fu_152_p2 );

    SC_METHOD(thread_t_fu_134_p2);
    sensitive << ( t_i_reg_102 );

    SC_METHOD(thread_tmp_1_i_fu_140_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( o_i_reg_91 );
    sensitive << ( exitcond_i_fu_129_p2 );
    sensitive << ( ap_condition_95 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_5_i_fu_152_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_fu_129_p2 );
    sensitive << ( ap_condition_95 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( o_fu_146_p2 );

    SC_METHOD(thread_tmp_fu_123_p2);
    sensitive << ( numReps_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_condition_84 );
    sensitive << ( exitcond_i_fu_129_p2 );
    sensitive << ( ap_condition_95 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingDataWidthCo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
    sc_trace(mVcdFile, numReps_dout, "(port)numReps_dout");
    sc_trace(mVcdFile, numReps_empty_n, "(port)numReps_empty_n");
    sc_trace(mVcdFile, numReps_read, "(port)numReps_read");
    sc_trace(mVcdFile, numReps_out_din, "(port)numReps_out_din");
    sc_trace(mVcdFile, numReps_out_full_n, "(port)numReps_out_full_n");
    sc_trace(mVcdFile, numReps_out_write, "(port)numReps_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_i_reg_191, "exitcond_i_reg_191");
    sc_trace(mVcdFile, tmp_1_i_reg_200, "tmp_1_i_reg_200");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, numReps_blk_n, "numReps_blk_n");
    sc_trace(mVcdFile, numReps_out_blk_n, "numReps_out_blk_n");
    sc_trace(mVcdFile, p_1_i_reg_79, "p_1_i_reg_79");
    sc_trace(mVcdFile, o_i_reg_91, "o_i_reg_91");
    sc_trace(mVcdFile, t_i_reg_102, "t_i_reg_102");
    sc_trace(mVcdFile, tmp_fu_123_p2, "tmp_fu_123_p2");
    sc_trace(mVcdFile, tmp_reg_186, "tmp_reg_186");
    sc_trace(mVcdFile, ap_condition_84, "ap_condition_84");
    sc_trace(mVcdFile, exitcond_i_fu_129_p2, "exitcond_i_fu_129_p2");
    sc_trace(mVcdFile, ap_condition_95, "ap_condition_95");
    sc_trace(mVcdFile, t_fu_134_p2, "t_fu_134_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_1_i_fu_140_p2, "tmp_1_i_fu_140_p2");
    sc_trace(mVcdFile, p_i_fu_158_p3, "p_i_fu_158_p3");
    sc_trace(mVcdFile, ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113, "ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113");
    sc_trace(mVcdFile, p_Val2_s_phi_fu_116_p4, "p_Val2_s_phi_fu_116_p4");
    sc_trace(mVcdFile, p_1_cast_i_fu_166_p1, "p_1_cast_i_fu_166_p1");
    sc_trace(mVcdFile, o_fu_146_p2, "o_fu_146_p2");
    sc_trace(mVcdFile, tmp_5_i_fu_152_p2, "tmp_5_i_fu_152_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_61, "ap_condition_61");
#endif

    }
}

StreamingDataWidthCo::~StreamingDataWidthCo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void StreamingDataWidthCo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                    !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                     !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1)) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
        o_i_reg_91 = p_i_fu_158_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        o_i_reg_91 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)))) {
        p_1_i_reg_79 = p_Val2_s_phi_fu_116_p4.read().range(31, 8);
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        p_1_i_reg_79 = ap_const_lv24_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
        t_i_reg_102 = t_fu_134_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
                !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        t_i_reg_102 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)))) {
        exitcond_i_reg_191 = exitcond_i_fu_129_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
        tmp_1_i_reg_200 = tmp_1_i_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        tmp_reg_186 = tmp_fu_123_p2.read();
    }
}

void StreamingDataWidthCo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(1, 1);
}

void StreamingDataWidthCo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void StreamingDataWidthCo::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(2, 2);
}

void StreamingDataWidthCo::thread_ap_condition_61() {
    ap_condition_61 = (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0));
}

void StreamingDataWidthCo::thread_ap_condition_84() {
    ap_condition_84 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(numReps_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(numReps_out_full_n.read(), ap_const_logic_0));
}

void StreamingDataWidthCo::thread_ap_condition_95() {
    ap_condition_95 = ((esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_200.read()) && 
  esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(out_V_V_full_n.read(), ap_const_logic_0)));
}

void StreamingDataWidthCo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113() {
    ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
}

void StreamingDataWidthCo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_exitcond_i_fu_129_p2() {
    exitcond_i_fu_129_p2 = (!t_i_reg_102.read().is_01() || !tmp_reg_186.read().is_01())? sc_lv<1>(): sc_lv<1>(t_i_reg_102.read() == tmp_reg_186.read());
}

void StreamingDataWidthCo::thread_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_200.read()))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthCo::thread_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_200.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_numReps_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        numReps_blk_n = numReps_empty_n.read();
    } else {
        numReps_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthCo::thread_numReps_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        numReps_out_blk_n = numReps_out_full_n.read();
    } else {
        numReps_out_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthCo::thread_numReps_out_din() {
    numReps_out_din = numReps_dout.read();
}

void StreamingDataWidthCo::thread_numReps_out_write() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        numReps_out_write = ap_const_logic_1;
    } else {
        numReps_out_write = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_numReps_read() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1))) {
        numReps_read = ap_const_logic_1;
    } else {
        numReps_read = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_o_fu_146_p2() {
    o_fu_146_p2 = (!ap_const_lv32_1.is_01() || !o_i_reg_91.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(o_i_reg_91.read()));
}

void StreamingDataWidthCo::thread_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0))) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void StreamingDataWidthCo::thread_out_V_V_din() {
    out_V_V_din = p_Val2_s_phi_fu_116_p4.read().range(8-1, 0);
}

void StreamingDataWidthCo::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_i_reg_191.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void StreamingDataWidthCo::thread_p_1_cast_i_fu_166_p1() {
    p_1_cast_i_fu_166_p1 = esl_zext<32,24>(p_1_i_reg_79.read());
}

void StreamingDataWidthCo::thread_p_Val2_s_phi_fu_116_p4() {
    if (esl_seteq<1,1,1>(ap_condition_61.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_200.read())) {
            p_Val2_s_phi_fu_116_p4 = p_1_cast_i_fu_166_p1.read();
        } else if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_i_reg_200.read())) {
            p_Val2_s_phi_fu_116_p4 = in_V_V_dout.read();
        } else {
            p_Val2_s_phi_fu_116_p4 = ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113.read();
        }
    } else {
        p_Val2_s_phi_fu_116_p4 = ap_phi_precharge_reg_pp0_iter1_p_Val2_s_reg_113.read();
    }
}

void StreamingDataWidthCo::thread_p_i_fu_158_p3() {
    p_i_fu_158_p3 = (!tmp_5_i_fu_152_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_5_i_fu_152_p2.read()[0].to_bool())? ap_const_lv32_0: o_fu_146_p2.read());
}

void StreamingDataWidthCo::thread_t_fu_134_p2() {
    t_fu_134_p2 = (!t_i_reg_102.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(t_i_reg_102.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void StreamingDataWidthCo::thread_tmp_1_i_fu_140_p2() {
    tmp_1_i_fu_140_p2 = (!o_i_reg_91.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(o_i_reg_91.read() == ap_const_lv32_0);
}

void StreamingDataWidthCo::thread_tmp_5_i_fu_152_p2() {
    tmp_5_i_fu_152_p2 = (!o_fu_146_p2.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<1>(): sc_lv<1>(o_fu_146_p2.read() == ap_const_lv32_4);
}

void StreamingDataWidthCo::thread_tmp_fu_123_p2() {
    tmp_fu_123_p2 = (!ap_const_lv32_7.is_01())? sc_lv<32>(): numReps_dout.read() << (unsigned short)ap_const_lv32_7.to_uint();
}

void StreamingDataWidthCo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_condition_84.read(), ap_const_boolean_1)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_condition_95.read(), ap_const_boolean_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_129_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

