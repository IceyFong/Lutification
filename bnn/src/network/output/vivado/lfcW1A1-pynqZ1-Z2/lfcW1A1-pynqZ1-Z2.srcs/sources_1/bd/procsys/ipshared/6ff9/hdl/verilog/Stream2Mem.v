// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Stream2Mem (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY,
        m_axi_out_V_AWADDR,
        m_axi_out_V_AWID,
        m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID,
        m_axi_out_V_WREADY,
        m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST,
        m_axi_out_V_WID,
        m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY,
        m_axi_out_V_ARADDR,
        m_axi_out_V_ARID,
        m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID,
        m_axi_out_V_RREADY,
        m_axi_out_V_RDATA,
        m_axi_out_V_RLAST,
        m_axi_out_V_RID,
        m_axi_out_V_RUSER,
        m_axi_out_V_RRESP,
        m_axi_out_V_BVALID,
        m_axi_out_V_BREADY,
        m_axi_out_V_BRESP,
        m_axi_out_V_BID,
        m_axi_out_V_BUSER,
        out_V3,
        tmp_2
);

parameter    ap_ST_fsm_state1 = 8'b1;
parameter    ap_ST_fsm_state2 = 8'b10;
parameter    ap_ST_fsm_pp0_stage0 = 8'b100;
parameter    ap_ST_fsm_state6 = 8'b1000;
parameter    ap_ST_fsm_state7 = 8'b10000;
parameter    ap_ST_fsm_state8 = 8'b100000;
parameter    ap_ST_fsm_state9 = 8'b1000000;
parameter    ap_ST_fsm_state10 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output   m_axi_out_V_AWVALID;
input   m_axi_out_V_AWREADY;
output  [63:0] m_axi_out_V_AWADDR;
output  [0:0] m_axi_out_V_AWID;
output  [31:0] m_axi_out_V_AWLEN;
output  [2:0] m_axi_out_V_AWSIZE;
output  [1:0] m_axi_out_V_AWBURST;
output  [1:0] m_axi_out_V_AWLOCK;
output  [3:0] m_axi_out_V_AWCACHE;
output  [2:0] m_axi_out_V_AWPROT;
output  [3:0] m_axi_out_V_AWQOS;
output  [3:0] m_axi_out_V_AWREGION;
output  [0:0] m_axi_out_V_AWUSER;
output   m_axi_out_V_WVALID;
input   m_axi_out_V_WREADY;
output  [63:0] m_axi_out_V_WDATA;
output  [7:0] m_axi_out_V_WSTRB;
output   m_axi_out_V_WLAST;
output  [0:0] m_axi_out_V_WID;
output  [0:0] m_axi_out_V_WUSER;
output   m_axi_out_V_ARVALID;
input   m_axi_out_V_ARREADY;
output  [63:0] m_axi_out_V_ARADDR;
output  [0:0] m_axi_out_V_ARID;
output  [31:0] m_axi_out_V_ARLEN;
output  [2:0] m_axi_out_V_ARSIZE;
output  [1:0] m_axi_out_V_ARBURST;
output  [1:0] m_axi_out_V_ARLOCK;
output  [3:0] m_axi_out_V_ARCACHE;
output  [2:0] m_axi_out_V_ARPROT;
output  [3:0] m_axi_out_V_ARQOS;
output  [3:0] m_axi_out_V_ARREGION;
output  [0:0] m_axi_out_V_ARUSER;
input   m_axi_out_V_RVALID;
output   m_axi_out_V_RREADY;
input  [63:0] m_axi_out_V_RDATA;
input   m_axi_out_V_RLAST;
input  [0:0] m_axi_out_V_RID;
input  [0:0] m_axi_out_V_RUSER;
input  [1:0] m_axi_out_V_RRESP;
input   m_axi_out_V_BVALID;
output   m_axi_out_V_BREADY;
input  [1:0] m_axi_out_V_BRESP;
input  [0:0] m_axi_out_V_BID;
input  [0:0] m_axi_out_V_BUSER;
input  [60:0] out_V3;
input  [31:0] tmp_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg m_axi_out_V_AWVALID;
reg m_axi_out_V_WVALID;
reg m_axi_out_V_BREADY;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    in_V_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_reg_150;
reg    out_V_blk_n_AW;
wire   [0:0] ap_CS_fsm_state2;
reg    out_V_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_tmp_reg_150;
reg    out_V_blk_n_B;
wire   [0:0] ap_CS_fsm_state10;
reg   [4:0] i_reg_93;
wire   [61:0] sum1_fu_112_p2;
reg   [61:0] sum1_reg_140;
reg    ap_sig_ioackin_m_axi_out_V_AWREADY;
wire   [0:0] tmp_fu_128_p2;
reg    ap_sig_ioackin_m_axi_out_V_WREADY;
wire   [4:0] i_1_fu_134_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] tmp_V_reg_159;
wire   [63:0] sum1_cast_fu_118_p1;
reg    ap_reg_ioackin_m_axi_out_V_AWREADY;
reg    ap_reg_ioackin_m_axi_out_V_WREADY;
wire   [61:0] out_V3_cast8_fu_108_p1;
wire   [61:0] tmp_5_cast_fu_104_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_condition_247;
reg    ap_condition_147;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_out_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_out_V_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & ~(1'b0 == tmp_fu_128_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & (1'b0 == tmp_fu_128_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & ~(1'b0 == tmp_fu_128_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY)) begin
                ap_reg_ioackin_m_axi_out_V_AWREADY <= 1'b0;
            end else if ((1'b1 == m_axi_out_V_AWREADY)) begin
                ap_reg_ioackin_m_axi_out_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_V_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150))) begin
            if ((ap_condition_147 == 1'b1)) begin
                ap_reg_ioackin_m_axi_out_V_WREADY <= 1'b0;
            end else if ((ap_condition_247 == 1'b1)) begin
                ap_reg_ioackin_m_axi_out_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == tmp_fu_128_p2))) begin
        i_reg_93 <= i_1_fu_134_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY))) begin
        i_reg_93 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))))) begin
        ap_pipeline_reg_pp0_iter1_tmp_reg_150 <= tmp_reg_150;
        tmp_reg_150 <= tmp_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sum1_reg_140 <= sum1_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == tmp_reg_150) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))))) begin
        tmp_V_reg_159 <= in_V_V_dout;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(m_axi_out_V_BVALID == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(m_axi_out_V_BVALID == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_V_AWREADY)) begin
        ap_sig_ioackin_m_axi_out_V_AWREADY = m_axi_out_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_V_WREADY)) begin
        ap_sig_ioackin_m_axi_out_V_WREADY = m_axi_out_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_m_axi_out_V_AWREADY))) begin
        m_axi_out_V_AWVALID = 1'b1;
    end else begin
        m_axi_out_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(m_axi_out_V_BVALID == 1'b0))) begin
        m_axi_out_V_BREADY = 1'b1;
    end else begin
        m_axi_out_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) & (1'b0 == ap_reg_ioackin_m_axi_out_V_WREADY))) begin
        m_axi_out_V_WVALID = 1'b1;
    end else begin
        m_axi_out_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_V_blk_n_AW = m_axi_out_V_AWREADY;
    end else begin
        out_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_V_blk_n_B = m_axi_out_V_BVALID;
    end else begin
        out_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150))) begin
        out_V_blk_n_W = m_axi_out_V_WREADY;
    end else begin
        out_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_out_V_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_fu_128_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_fu_128_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (~(m_axi_out_V_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

always @ (*) begin
    ap_condition_147 = ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_tmp_reg_150) & (1'b0 == ap_sig_ioackin_m_axi_out_V_WREADY)));
end

always @ (*) begin
    ap_condition_247 = ((1'b1 == m_axi_out_V_WREADY) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == tmp_reg_150) & (in_V_V_empty_n == 1'b0)));
end

assign i_1_fu_134_p2 = (i_reg_93 + ap_const_lv5_1);

assign m_axi_out_V_ARADDR = ap_const_lv64_0;

assign m_axi_out_V_ARBURST = ap_const_lv2_0;

assign m_axi_out_V_ARCACHE = ap_const_lv4_0;

assign m_axi_out_V_ARID = 1'b0;

assign m_axi_out_V_ARLEN = ap_const_lv32_0;

assign m_axi_out_V_ARLOCK = ap_const_lv2_0;

assign m_axi_out_V_ARPROT = ap_const_lv3_0;

assign m_axi_out_V_ARQOS = ap_const_lv4_0;

assign m_axi_out_V_ARREGION = ap_const_lv4_0;

assign m_axi_out_V_ARSIZE = ap_const_lv3_0;

assign m_axi_out_V_ARUSER = 1'b0;

assign m_axi_out_V_ARVALID = 1'b0;

assign m_axi_out_V_AWADDR = sum1_cast_fu_118_p1;

assign m_axi_out_V_AWBURST = ap_const_lv2_0;

assign m_axi_out_V_AWCACHE = ap_const_lv4_0;

assign m_axi_out_V_AWID = 1'b0;

assign m_axi_out_V_AWLEN = ap_const_lv32_10;

assign m_axi_out_V_AWLOCK = ap_const_lv2_0;

assign m_axi_out_V_AWPROT = ap_const_lv3_0;

assign m_axi_out_V_AWQOS = ap_const_lv4_0;

assign m_axi_out_V_AWREGION = ap_const_lv4_0;

assign m_axi_out_V_AWSIZE = ap_const_lv3_0;

assign m_axi_out_V_AWUSER = 1'b0;

assign m_axi_out_V_RREADY = 1'b0;

assign m_axi_out_V_WDATA = tmp_V_reg_159;

assign m_axi_out_V_WID = 1'b0;

assign m_axi_out_V_WLAST = 1'b0;

assign m_axi_out_V_WSTRB = ap_const_lv8_FF;

assign m_axi_out_V_WUSER = 1'b0;

assign out_V3_cast8_fu_108_p1 = out_V3;

assign sum1_cast_fu_118_p1 = sum1_reg_140;

assign sum1_fu_112_p2 = (out_V3_cast8_fu_108_p1 + tmp_5_cast_fu_104_p1);

assign tmp_5_cast_fu_104_p1 = tmp_2;

assign tmp_fu_128_p2 = ((i_reg_93 == ap_const_lv5_10) ? 1'b1 : 1'b0);

endmodule //Stream2Mem
